# Copyright 2020-2022 Signal Messenger, LLC
# SPDX-License-Identifier: AGPL-3.0-only

name: Release
on:
  push:
    tags:
      - "v*.*.*-enum.*"

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
      - name: Download package.json
        run: >
          curl -sS https://raw.githubusercontent.com/${{ env.GITHUB_REPOSITORY }}/${{ env.GITHUB_SHA }}/package.json?token=${{ secrets.GITHUB_TOKEN }}
          > package.json
      - name: Extract version as release name
        run: echo "release_name=$(awk -F\" '$2 == "version" { print $4 }' package.json)" >> $GITHUB_ENV
      - uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.release_name }}
          generate_release_notes: false

  build:
    needs: create

    strategy:
      fail-fast: false # let others run to completion
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            release_suffix: ubuntu
          - os: macos-latest
            release_suffix: mac
          - os: windows-latest
            release_suffix: windows

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Install Apple certificates
        if: matrix.os == 'macos-latest'
        env:
          APP_CERT_BASE64: ${{ secrets.APP_CERT_BASE64 }}
          INSTALL_CERT_BASE64: ${{ secrets.INSTALL_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_USERNAME: ${{ secrets.APPLE_USERNAME }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # create variables
          APP_CERT_PATH=$RUNNER_TEMP/app_cert.p12
          INSTALL_CERT_PATH=$RUNNER_TEMP/install_cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APP_CERT_BASE64" | base64 --decode --output $APP_CERT_PATH
          echo -n "$INSTALL_CERT_BASE64" | base64 --decode --output $INSTALL_CERT_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $APP_CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALL_CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Prepare Windows checkout and certificate
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.pem -Value '${{ secrets.WIN_ENUM_SIGN_CERT }}'
          certutil -decode certificate\certificate.pem certificate\certificate.pfx
          certutil -user -p '${{ secrets.WIN_ENUM_SIGN_CERT_PASSWORD }}' -importPFX certificate\certificate.pfx

      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16.13.2'
      - run: npm install -g yarn@1.22.10

      - name: Cache Desktop node_modules
        id: cache-desktop-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('package.json', 'yarn.lock', 'patches/**') }}
      - name: Install Desktop node_modules
        if: steps.cache-desktop-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - run: yarn generate
      - run: yarn prepare-beta-build
      - run: yarn build
        env:
          DISABLE_INSPECT_FUSE: on

      - name: Upload binaries for deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd deploy
          yarn install
          yarn upload

      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create.outputs.tag-name }}
          files: |
            release/*.dmg
            release/*.deb
            release/*.exe

      - name: Clean up keychain and provisioning profile
        if: ${{ always() &&  matrix.os == 'macos-latest' }}
        run: security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
